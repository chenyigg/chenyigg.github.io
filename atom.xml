<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-24T12:38:40.043Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式 之 工厂模式</title>
    <link href="http://yoursite.com/2017/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/工厂模式/</id>
    <published>2017-07-24T12:10:27.000Z</published>
    <updated>2017-07-24T12:38:40.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote>
<p><strong>工厂方法模式</strong> 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>
<p><strong>抽象工厂模式</strong> 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。 <a id="more"></a> </p>
</blockquote>
<h3 id="定义简单工厂"><a href="#定义简单工厂" class="headerlink" title="定义简单工厂"></a>定义简单工厂</h3><p>​    <strong>简单工厂</strong> ，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类 <strong>解耦</strong> 。</p>
<p><img src="http://img.mukewang.com/57a36e6c00015d0d08390528.png" alt=""></p>
<h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">abstract</span> Product <span class="title">factoryMethod</span><span class="params">(String type)</span></span></div></pre></td></tr></table></figure>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p><img src="http://img.mukewang.com/57a388f80001feec07690453.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-要依赖抽象不要依赖具体类-依赖倒置原则"><a href="#1-要依赖抽象，不要依赖具体类。——-依赖倒置原则" class="headerlink" title="1. 要依赖抽象，不要依赖具体类。—— 依赖倒置原则"></a>1. 要依赖抽象，不要依赖具体类。—— 依赖倒置原则</h4><blockquote>
<ul>
<li>变量不可以持有具体类的引用。</li>
<li>不要让类派生自具体类。</li>
<li>不要覆盖基类中已实现的方法。</li>
</ul>
</blockquote>
<p>​    不能让高层组件依赖低层组件，而且，不管高层或低层组件，“两者” 都应该依赖于 <strong>抽象</strong> 。所谓 “高层” 组件，是由其他低层组件定义其 <em>行为</em> 的类。</p>
<p>​    如果有一个不像是会改变的类，那么在代码中直接实例化具体类也就没有什么大碍。另一方面，如果有个类可能改变，你可以采用一些好技巧（例如工厂方法）来封装改变。</p>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sauce = ingredientFactory.createSauce();</div></pre></td></tr></table></figure>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p><img src="http://img.mukewang.com/57a39dc60001bf0b06180511.png" alt=""></p>
<h3 id="工厂方法和抽象工厂的区别"><a href="#工厂方法和抽象工厂的区别" class="headerlink" title="工厂方法和抽象工厂的区别"></a>工厂方法和抽象工厂的区别</h3><ol>
<li>工厂方法使用 <strong>继承</strong> ：把对象的创建 <em>委托</em> 给子类，子类实现工厂方法来创建对象；抽象工厂使用对象 <strong>组合</strong> ：对象的创建被实现在工厂接口所暴露出来的 <strong>方法</strong> 中。</li>
<li>抽象工厂是用来创建整个 <strong>产品家族</strong> 的；而工厂方法只是创建一个 <strong>产品</strong> 。抽象工厂的具体工厂经常实现工厂方法来创建它的产品。</li>
<li>所有工厂模式都通过 <strong>减少</strong> 应用程序与具体类之间的 <strong>依赖</strong> 促进松耦合。</li>
<li>工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工厂方法模式&lt;/strong&gt; 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抽象工厂模式&lt;/strong&gt; 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 装饰者模式</title>
    <link href="http://yoursite.com/2017/07/24/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/装饰者模式/</id>
    <published>2017-07-24T07:15:33.000Z</published>
    <updated>2017-07-24T12:36:58.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><blockquote>
<p><strong>装饰者模式</strong> 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。 <a id="more"></a> </p>
<ul>
<li>装饰者和被装饰者对象有相同的超类型。</li>
<li>你可以用一个或多个装饰者包装一个对象。</li>
<li>既然装饰者和被装饰者对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象代替它。</li>
<li>装饰者可以在所委托被装饰者的行为 <em>之前 <strong>与/或</strong> 之后</em> ，加上自己的行为，以达到特定的目的。</li>
<li>对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰对象。</li>
</ul>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://img.mukewang.com/57a213c20001a3ee08100592.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-类应该对扩展开放对修改关闭"><a href="#1-类应该对扩展开放，对修改关闭。" class="headerlink" title="1. 类应该对扩展开放，对修改关闭。"></a>1. 类应该对扩展开放，对修改关闭。</h4><p>​    允许类容易 <strong>扩展</strong> ，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有 <strong>弹性</strong> 就可以应对改变，可以接受新的功能来应对改变的需求。</p>
<p>​    在 <strong>选择</strong> 需要被扩展的代码部分时要小心。每个地方都采用 <em>开放—关闭原则</em> ，是一种浪费，也没必要，还会导致代码变得复杂且难以理解。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​    装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。</p>
<p>​    只有在针对 <strong>抽象</strong> 组件类型编程时，才不会因为装饰者而受到影响。如果的确针对 <strong>特定</strong> 的具体组件编程，就应该重新思考应用架构，以及装饰者是否适合。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt; 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 观察者模式</title>
    <link href="http://yoursite.com/2017/07/24/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/观察者模式/</id>
    <published>2017-07-24T02:05:07.000Z</published>
    <updated>2017-07-24T12:36:03.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p><strong>观察者模式</strong> 定义了对象之间的<em>一对多</em>依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 <a id="more"></a> </p>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://img.mukewang.com/57a0c6a10001c6d708190539.png" alt=""></p>
<h3 id="松耦合的威力"><a href="#松耦合的威力" class="headerlink" title="松耦合的威力"></a>松耦合的威力</h3><blockquote>
<p>当两个对象之间 <strong>松耦合</strong> ，它们依然可以交互，但是不太清楚彼此的 <strong>细节</strong> 。</p>
<p>观察者模式提供了一种对象设计，让主题和观察者之间松耦合。</p>
</blockquote>
<p>​    主题只知道观察者实现了某个接口（也就是 <strong>Observer 接口</strong>）。主题不需要知道观察者的具体类是谁、做了些什么或其他任何细节。主题唯一依赖的东西是一个实现 Observer 接口的 <strong>对象列表</strong> ，我们可以随时增加观察者。</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-为了交互对象之间的松耦合设计而努力"><a href="#1-为了交互对象之间的松耦合设计而努力。" class="headerlink" title="1. 为了交互对象之间的松耦合设计而努力。"></a>1. 为了交互对象之间的松耦合设计而努力。</h4><p>​    松耦合的设计之所以能让我们建立有 <em>弹性</em> 的 OO 系统，能够应对变化，是因为对象之间的 <strong>相互依赖</strong> 降到了最低。</p>
<h4 id="2-找出程序中会变化的方面然后将其和固定不变的方面相分类"><a href="#2-找出程序中会变化的方面，然后将其和固定不变的方面相分类。" class="headerlink" title="2. 找出程序中会变化的方面，然后将其和固定不变的方面相分类。"></a>2. 找出程序中会变化的方面，然后将其和固定不变的方面相分类。</h4><p>​    在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。这就叫 <strong>提前规划</strong>！</p>
<h4 id="3-针对接口编程不针对实现编程"><a href="#3-针对接口编程，不针对实现编程。" class="headerlink" title="3. 针对接口编程，不针对实现编程。"></a>3. 针对接口编程，不针对实现编程。</h4><p>​    主题与观察者都使用 <strong>接口</strong> ：观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样就可以让两者之间运转正常，又同时具有松耦合的优点。</p>
<h4 id="4-多用组合少用继承"><a href="#4-多用组合，少用继承。" class="headerlink" title="4. 多用组合，少用继承。"></a>4. 多用组合，少用继承。</h4><p>​    观察者模式利用 “组合” 将许多观察者 <strong>组合</strong> 进主题中，对象之间的这种关系不是通过继承产生的，而是通过运行时利用组合的方式而产生的。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​    有多个观察者时，不可以依赖 <strong>特定</strong> 的通知次序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt; 定义了对象之间的&lt;em&gt;一对多&lt;/em&gt;依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 策略模式</title>
    <link href="http://yoursite.com/2017/07/23/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/23/策略模式/</id>
    <published>2017-07-23T12:10:27.000Z</published>
    <updated>2017-07-24T12:22:04.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p><strong>策略模式</strong> 定义了算法族，分别<em>封装</em>起来，让它们之间可以相互<em>替换</em>，此模式让算法的变化独立与使用算法的客户。 <a id="more"></a> </p>
</blockquote>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-找出应用中可能需要变化之处把它们独立出来不要和那些不需要变化的代码混在一起"><a href="#1-找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。" class="headerlink" title="1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。"></a>1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</h4><p>​    把会 <strong>变化</strong> 的部分取出并 <strong><em>封装</em></strong> 起来，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。</p>
<p>​    所有的模式都提供了一套方法让 “系统中的某部分改变 <strong>不会影响</strong> 其他部分” 。</p>
<h4 id="2-针对接口编程而不是针对实现编程"><a href="#2-针对接口编程，而不是针对实现编程。" class="headerlink" title="2. 针对接口编程，而不是针对实现编程。"></a>2. 针对接口编程，而不是针对实现编程。</h4><p>​    以前的做法：行为来自超类的具体实现，或是继承某个借口并有子类自行实现而来。装两种做法都 <strong>依赖于</strong> “ 实现” ，没办法更改行为（除非写更多代码）。</p>
<p>​    新设计：子类将使用接口所表示的行为，特定的具体行为编写在<em>实现了接口的类</em>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">  	<span class="comment">// 每只鸭子都会引用实现该行为接口的对象</span></div><div class="line">  	QuackBehavior quackBehavior;</div><div class="line">  	...</div><div class="line">  	<span class="comment">// 通过委托 quackBehavior 对象，处理行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</div><div class="line">      quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-多用组合少用继承"><a href="#3-多用组合，少用继承。" class="headerlink" title="3. 多用组合，少用继承。"></a>3. 多用组合，少用继承。</h4><p>​    使用组合建立系统具有很大的 <em>弹性</em> ，不仅可将算法族封装成类，更可以 “在运行时 <strong>动态</strong> 地改变行为” 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt; 定义了算法族，分别&lt;em&gt;封装&lt;/em&gt;起来，让它们之间可以相互&lt;em&gt;替换&lt;/em&gt;，此模式让算法的变化独立与使用算法的客户。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gradle 学习笔记</title>
    <link href="http://yoursite.com/2017/07/22/Gradle-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/22/Gradle-学习笔记/</id>
    <published>2017-07-22T13:40:27.000Z</published>
    <updated>2017-07-23T07:12:23.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><blockquote>
<p>良好的编码习惯和风格，对于减少不必要的 Gradle 问题是很有帮助的。 <a id="more"></a> 例如库项目中的统一资源前缀、统一的 arr 引用、 Mainifest 中统一的 Style 配置等，这些在 Gradle 进行编译的过程中是非常容易出错的。</p>
</blockquote>
<p>[TOC]</p>
<h4 id="gradle-初探"><a href="#Gradle-初探" class="headerlink" title="Gradle 初探"></a>Gradle 初探</h4><p><strong>1. 项目全局 build.gradle</strong></p>
<p><strong>2. Module build.gradle</strong></p>
<ul>
<li>apply plugin 领域</li>
<li>android 领域</li>
<li>dependencies 领域</li>
<li>Android Gradle DSL 的<a href="http://google.github.io/android-gradle-dsl/current/index.html" target="_blank" rel="external">文档</a></li>
</ul>
<p><strong>3. local.properties</strong></p>
<p>IDE 通过 Android_Home 环境变量自动生成配置文件。</p>
<p><strong>4. Gradle Task</strong></p>
<p>通过多个 Gradle Tesk 相互调用，编译 Android 工程。</p>
<h4 id="gradle-进阶"><a href="#Gradle-进阶" class="headerlink" title="Gradle 进阶"></a>Gradle 进阶</h4><p><strong>1. 更改项目结构</strong></p>
<p>​    将 Eclipse 项目结构修改，并导入到 Android Studio 中。</p>
<p>​    Android 项目的项目结构要在 Android 领域中进行配置，如下所示：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">  	main &#123;</div><div class="line">      	java.srcDris = [<span class="string">'src'</span>]</div><div class="line">      	res.srcDris = [<span class="string">'res'</span>]</div><div class="line">      	asset.srcDris = [<span class="string">'assets'</span>]</div><div class="line">      	jni.srcDris = [<span class="string">'jni'</span>]</div><div class="line">      	jniLibs.srcDris = [<span class="string">'libs'</span>]</div><div class="line">      	mainifest.srcFile <span class="string">'AndroidMainifest.xml'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 构建全局配置</strong></p>
<p>​    在项目全局 build.gradle 中，通过 ext 领域指定全局的配置信息。</p>
<p>​    通过 rootProject.ext 引用所有的全局参数。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">  	compileSdkVersion = <span class="number">23</span></div><div class="line">  	buildToolsVersion = <span class="string">"23.0.2"</span></div><div class="line">  	minSdkVersion = <span class="number">14</span></div><div class="line">  	targetSdkVersion = <span class="number">23</span></div><div class="line">  	versionCode = <span class="number">3</span></div><div class="line">  	versionName = <span class="string">"1.0.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 构建 defaultConfig</strong></p>
<p>​    在 Gradle 脚本中写代码，以便动态控制编译过程。</p>
<p><strong>4. 构建 buildTypes</strong></p>
<p>​    通过创建不同的构建类型，从而生成不同类型的 apk 。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">  	release &#123;</div><div class="line">      	minifyEnabled <span class="literal">false</span></div><div class="line">      	proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    构建类型 buildTypes 的继承</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">xys.initWith(buildTypes.debug)</div><div class="line">xys &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 构建 signingConfigs</strong></p>
<p><strong>6. 生成签名</strong></p>
<p>​    Build -&gt; Generate Signed APK 选择 module，点击 Next，选择 “Create new …” ，填写必要的信息</p>
<p>​    签名配置</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">  	xys &#123;</div><div class="line">      	storeFile file(<span class="string">"xys_key.jks"</span>)</div><div class="line">      	storePassWord <span class="string">"1234567"</span></div><div class="line">      	keyAlias <span class="string">"xys"</span></div><div class="line">      	keyPassword <span class="string">"1234567"</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>7. Android 领域中的可选配置</strong></p>
<ul>
<li>compileOptions：配置编译的选项（Java 的编译版本）</li>
<li>lintOptions：控制 Lint 代码检查。在 Lint Check 的时候，编译会因为 Lint的 error 而终止。</li>
</ul>
<p><strong>8. 构建 Proguard</strong></p>
<p>​    Proguard 配置是Android 的 apk 混淆文件配置，它同样可以精简代码、资源，优化代码结构。</p>
<p><strong>9. Gradle 动态参数配置</strong></p>
<p><strong>10. System.properties 方式</strong></p>
<p>​    打开 gradle.properties 文件，将配置参数配置到该文件中，然后通过 System.properties[KEY] 获取参数。</p>
<p><strong>11. 多渠道打包</strong></p>
<p>​    创建渠道占位符：在 AndroidMainifest 文件的 Application 节点下，创建 meta-data 节点。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">"PRODUCT"</span></div><div class="line">	<span class="attr">android:value</span>=<span class="string">"$&#123;CHANNEL_VALUE&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>​    配置 Gradle 脚本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">  	product1 &#123;&#125;</div><div class="line">  	product2 &#123;&#125;</div><div class="line">  	product3 &#123;&#125;</div><div class="line">&#125;</div><div class="line">productFlavors.all &#123; flavor -&gt;</div><div class="line">  	flavor.manifestPlaceholders = [<span class="string">CHANNEL_VALUE:</span>name]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>12. 生成重命名包</strong></p>
<p><strong>13. 为不同版本添加不同代码</strong></p>
<p>​    在开发中，不同版本通常有不同的代码功能。一般会有一个全局的变量开关，根据不同的版本设置不同的值。</p>
<h4 id="gradle-多项目依赖"><a href="#Gradle-多项目依赖" class="headerlink" title="Gradle 多项目依赖"></a>Gradle 多项目依赖</h4><blockquote>
<p>​    Android通过提供了一个新的依赖 —— <em>aar</em> 。通过 <em>aar</em> 方式进行项目依赖，主项目可以像使用 jar 包一样使用这个库项目。</p>
</blockquote>
<p><strong>1. jar 包依赖</strong></p>
<p>​    在每一个 module 的根目录下都有一个 libs 文件夹，开发者可以把 jar 包拷贝到该目录下，并单击鼠标右键在菜单中选择 “add as library” 进行引用（或者直接 Sync 项目也可以实现引用）。</p>
<p>​    使用 Gradle 编译成 jar 包</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">task makeJar(<span class="string">type:</span> Jar) &#123;</div><div class="line">  	<span class="comment">// 清空已经存在的 jar 包</span></div><div class="line">  	delete <span class="string">'libs/sdk.jar'</span></div><div class="line">  	<span class="comment">// 指定生成的 jar 包名</span></div><div class="line">  	baseName <span class="string">'sdk'</span></div><div class="line">  	<span class="comment">// 从 class 文件生成 jar 包</span></div><div class="line">  	from(<span class="string">'build/intermediates/classes/debug/com/xys'</span>)</div><div class="line">  	<span class="comment">// 打包进 jar 包后的文件目录结构</span></div><div class="line">  	into(<span class="string">'com/xys/'</span>)</div><div class="line">  	<span class="comment">// 去掉不需要打包的目录和文件</span></div><div class="line">  	exclude(<span class="string">'test/'</span>,<span class="string">'BuildConfig.class'</span>,<span class="string">'R.class'</span>)</div><div class="line">  	<span class="comment">// 去掉 R 文件</span></div><div class="line">  	exclude &#123;it.name.startsWith(<span class="string">'R$S'</span>);&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 本地库项目依赖</strong></p>
<p>​    Android Studio 提供库项目的依赖方法。</p>
<p>​    创建 module：File -&gt; New -&gt; New Module ，在弹出的界面中选择 Android Library 。</p>
<p><strong>3. 远程仓库依赖</strong></p>
<p>​    Gradle 支持以 aar 的形式依赖远程服务器上的库项目。如：引用 Maven 中央库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.jckewharton.scalpel.scalpel:scalpel:1.1.2'</span></div></pre></td></tr></table></figure>
<p><strong>4. 本地 aar 依赖</strong></p>
<p>​    对于本地项目来说，既可以使用 module 的方式进行依赖，也可以和从远程仓库中拉取下来的 aar 一样，使用本地的 aar 进行依赖。</p>
<h4 id="gradle-依赖管理"><a href="#Gradle-依赖管理" class="headerlink" title="Gradle 依赖管理"></a>Gradle 依赖管理</h4><blockquote>
<p>​    依赖可的管理工作问题，特别是一个依赖的库项目同时还依赖了另一个库项目，如果某个库项目发生改变，而且与以前版本不兼容，就会导致依赖库发生问题</p>
</blockquote>
<p><strong>1. Gradle 依赖库缓存</strong></p>
<p>​    Gradle 拉取的 aar 库保存在本地的 ~/.gradle 文件夹和 ~/.m2 文件夹中。</p>
<p><strong>2. 利用 Gradle 的通知机制</strong></p>
<p>​    当项目有版本库更新之后，Gradle 会给出一种通知机制，即利用 Gradle 的检查周期进行 <em>check</em> 。</p>
<p><strong>3. 利用 Gradle 的依赖检查</strong></p>
<p><strong>4. Gradle 依赖传递</strong></p>
<p>​    当主项目 A 依赖库项目 B ，库项目 B 依赖库项目 C 和 jar 包 D 。</p>
<p>​    B项目及其依赖的所有项目，即 C 和 D ：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile ‘com.xxx.xxxxx.xxxxxx<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>-SNAPSHOT’</div></pre></td></tr></table></figure>
<p>​    引用 B 项目，但不进行依赖传递，即不依赖库项目 C ：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile ‘com.xxx.xxxxx.xxxxxx<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>-SNAPSHOT <span class="meta">@aar</span>’</div></pre></td></tr></table></figure>
<p>​    排除一个库引用的其他库：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">compile (‘com.xxx.yyy.aaa<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>’) &#123;</div><div class="line">  	exclude <span class="string">module:</span> <span class="string">'com.xxx.yyy.bbb:1.1.2'</span></div><div class="line">  	exclude <span class="string">module:</span> <span class="string">'com.xxx.yyy.ccc:1.1.3'</span></div><div class="line">&#125;</div><div class="line">compile <span class="string">'com.xxx.yyy.bbb:1.1.2'</span></div><div class="line">compile <span class="string">'com.xxx.yyy.ccc:1.1.2'</span></div></pre></td></tr></table></figure>
<p><strong>5. Gradle 依赖统一管理</strong></p>
<p>​    将全局参数抽取出来，写到一个单独的配置文件中，如：config.gradle 文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">  	android = [<span class="string">compileSdkVersion:</span><span class="number">23</span>,</div><div class="line"><span class="symbol">  			   buildToolsVersion:</span> <span class="string">'23,0,2'</span>]</div><div class="line">  	dependencies = [<span class="string">supportv7:</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="gradle-使用技巧"><a href="#Gradle-使用技巧" class="headerlink" title="Gradle 使用技巧"></a>Gradle 使用技巧</h4><p><strong>1. 生成 Gradle 编译脚本</strong></p>
<p>​    只要在目录下执行 gradle init wrapper 指令就可以生成这些必须的脚本文件，在在这些默认的脚本上进行修改就容易多了 。</p>
<p><strong>2. Gradle peer not authenticated</strong></p>
<p>​    更新 Gradle 的依赖包时，发生 peer not authenticated 的异常，导致 Gradle 无法编译。</p>
<p>​    使用 VPN 进行网络访问，或者修改 jcenter 库的地址：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jcenter &#123;</div><div class="line">  	url <span class="string">"http://jcenter.bintray.com/"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. Gradle 性能检测</strong></p>
<p>​    Gradle 编译工具本身就内置了一个性能分析工具 —— profile 。执行一下脚本：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle build -profile</div></pre></td></tr></table></figure>
<p>​    在根目录的 Build 目录下就会生成一个 profile 文件，通过分析该 profile 文件，适当关掉一些不必要的 Task 可提高 Gradle 编译速度。</p>
<p><strong>4. Gradle 加速</strong></p>
<p>​    Gradle 在编译时会执行大量的 Task ，同时生成很多文件。因此磁盘 IO 会造成编译速度缓慢。最好的办法是：更换固态（增加磁盘 IO 速度）、尽量减少本地库项目的依赖，多使用 <strong>aar</strong> 进行依赖。</p>
<p>​    在 gradle.properties 中添加一下代码，开启 Gradle 的多线程和多核心支持。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.gradle.daemon=<span class="literal">true</span></div><div class="line">org.gradle.parallel=<span class="literal">true</span></div><div class="line">org.gradle.configureondemand=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>​    在 build.gradle 中开启 Gradle 的增量编译。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dexOptions &#123;</div><div class="line">incremental <span class="literal">true</span></div><div class="line">	javaMaxHeapSize <span class="string">"4g"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 增加编译内存</strong></p>
<p>​    当遇到编译时内存溢出时，则需要对默认的内存设置进行调整，即在 gradle.properties 文件中增加内存配置。</p>
<p><strong>6. Gradle 调用终端指令</strong></p>
<p>​    例如，新建一个 Task，</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task testcmd &#123;</div><div class="line">  	println <span class="string">'git log --pretty=oneline -1'</span>.execute([], project.rootDir).text</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>7. 使用 Gradle 精简资源</strong></p>
<p>​    <strong>minifyEnabled</strong> 指令不仅可以对代码进行混淆，还可以对代码进行<em>优化、精简</em>。同时配合 <strong>shrinkResources</strong> 指令，还可以<em>清除</em>项目工程文件中无效的资源文件，进一步精简 APK 文件。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  	......</div><div class="line">  	buildTypes &#123;</div><div class="line">      	minifyEnabled <span class="literal">true</span></div><div class="line">      	shrinkResources <span class="literal">true</span></div><div class="line">      	proguardFiles getDefaultProguandfile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rule.pro'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>8. 清除 Gradle 缓存</strong></p>
<p>​    使用 gradle clean 指令清理 Gradle 缓存；还有 gradle –refresh-dependencies 指令重新刷新全部的依赖库，获取新的版本库。</p>
<p><strong>9. 使用 Gradle 本地缓存</strong></p>
<p>​    在 Setting - Build - Build Tools - Gradle 标签中，选择 Offline work 并指定默认的 .gradle 文件夹。</p>
<p><strong>10. Gradle 版本问题导致的编译错误</strong></p>
<p>​    例如 Gradle Version 导致的问题是由于 gradle wrapper 导致的。解决这个问题：Setting -&gt; Build - Build Tools - Gradle -&gt; Project - Level setting，勾选 Use default gradle wrapper (recommended)。</p>
<p>​    一般来说，应该在本地配置稳定的 Gradle 版本，即勾选 Use local gradle distribution 选项，填写本地的 Gradle 路径（需要配置好 Gradle Shell 的环境变量）。新版的 Android Studio 中，已经自带 Gradle 了，可以直接链接到 Android Studio 中的 Gradle。</p>
<p><strong>11. Gradle 资源冲突</strong></p>
<p>​    Gradle 采用的是合并的方式进行编译，所有的文件、代码都会被 <strong><em>Merge</em></strong> 到一起，相同的资源名就会发生冲突。因此，需要对<em>代码规范</em>进行调整，对于资源、文件名来说，尽量使用 module 前缀来进行区分，jar 包、aar库的版本一定要进行统一管理。</p>
<h4 id="gradle-自定义插件"><a href="#Gradle-自定义插件" class="headerlink" title="Gradle 自定义插件"></a>Gradle 自定义插件</h4><blockquote>
<p>在 Gradle 中创建<strong><em>自定义</em></strong>插件，Gradle 提供了一下三种方式。</p>
<ul>
<li>在 build.gradle 脚本中直接使用。</li>
<li>在 buildSrc 中使用。</li>
<li>在独立 Module 中使用。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;良好的编码习惯和风格，对于减少不必要的 Gradle 问题是很有帮助的。
    
    </summary>
    
    
  </entry>
  
</feed>
