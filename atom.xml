<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-27T10:00:22.669Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/07/27/%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%B8%E5%A4%84/"/>
    <id>http://yoursite.com/2017/07/27/与设计模式相处/</id>
    <published>2017-07-27T10:00:50.976Z</published>
    <updated>2017-07-27T10:00:22.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="与设计模式相处"><a href="#与设计模式相处" class="headerlink" title="与设计模式相处"></a>与设计模式相处</h1><blockquote>
<p><strong>模式</strong> 是在某情景下，针对某问题的某种解决方案。</p>
<p><strong>情景</strong> 就是应用某个模式的情况，这应该是会不断出现的情况。</p>
<p><strong>问题</strong> 就是你想在某情景下达到的目标，但也可以是某情景下的约束。</p>
<p><strong>解决方案</strong> 就是你所追求的：一个 <strong><em>通用</em></strong> 的设计，用来约束、达到目标。</p>
</blockquote>
<h4 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h4><h5 id="1-创建型"><a href="#1-创建型" class="headerlink" title="1. 创建型"></a>1. 创建型</h5><blockquote>
<p><strong>创建型模式</strong> 涉及到将对象 <em>实例化</em> ，这类模式都提供一个方法，将客户从所需要实例化的对象中 <em>解耦</em> 。</p>
<p>如：单件模式、工厂方法、抽象工厂</p>
</blockquote>
<h5 id="2-行为型"><a href="#2-行为型" class="headerlink" title="2. 行为型"></a>2. 行为型</h5><blockquote>
<p>只要是 <strong>行为型模式</strong> ，都涉及到类与对象如何 <em>交互</em> 及 <em>分配职责</em> 。</p>
<p>如：模板方法、迭代器、命令模式、观察者模式、状态模式、策略模式</p>
</blockquote>
<h5 id="3-结构型"><a href="#3-结构型" class="headerlink" title="3. 结构型"></a>3. 结构型</h5><blockquote>
<p><strong>结构性模式</strong> 可以让你把类或对象 <em>组合</em> 到更大的结构中。</p>
<p>如：装饰者模式、代理模式、外观模式、适配器模式、组合模式</p>
</blockquote>
<h4 id="运用设计模式"><a href="#运用设计模式" class="headerlink" title="运用设计模式"></a>运用设计模式</h4><p>​    不急切与使用模式，而是致力于最能解决问题的简单方案，考虑对象的原则，以及它们之间的折衷。</p>
<ul>
<li>用模式思考</li>
<li>保持 <strong><em>简单</em></strong> </li>
<li>设计模式并非并非万灵丹</li>
<li>你知道何时需要模式 ……</li>
<li><em>重构</em> 的时间就是模式的时间</li>
<li>拿掉你所不需要的，不要害怕将一个设计模式从你的设计中删除</li>
<li>如果你现在 <em>不需要</em> ，就别做</li>
</ul>
<h4 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h4><blockquote>
<p><strong>反模式</strong> 告诉你如何采用一个不好的解决方案解决一个问题 。 </p>
</blockquote>
<ol>
<li>反模式看起来总像是一个好的解决方案，但是当它真正被采用后，就会带来麻烦。</li>
<li>通过将反模式归档，我们能够帮助其他人在实现它们之前，分辨出不好的解决方案。</li>
<li>像模式一样，有许多类型的反模式，包括了开发反模式、OO反模式、组织反模式和领域特定反模式。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;与设计模式相处&quot;&gt;&lt;a href=&quot;#与设计模式相处&quot; class=&quot;headerlink&quot; title=&quot;与设计模式相处&quot;&gt;&lt;/a&gt;与设计模式相处&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;模式&lt;/strong&gt; 是在某情景下，针对某问题的某种解决
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/07/27/%E5%A4%8D%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/27/复合模式/</id>
    <published>2017-07-27T08:24:33.146Z</published>
    <updated>2017-07-27T08:22:57.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复合模式"><a href="#复合模式" class="headerlink" title="复合模式"></a>复合模式</h1><blockquote>
<p>模式通常被一起使用，并被 <strong>组合</strong> 在同一个设计解决方案中。</p>
<p><strong>复合模式</strong> 在一个解决方案中结合两个或多个模式，已解决 <em>一般或重复</em> 发生的问题。</p>
</blockquote>
<h3 id="mvc-模式"><a href="#MVC-模式" class="headerlink" title="MVC 模式"></a>MVC 模式</h3><blockquote>
<p>MVC 是复合模式，结合观察者模式、策略模式和组合模式。</p>
<ul>
<li>模型使用观察者模式，以便观察者更新，同时保持两者之间解耦。</li>
<li>控制器是视图的策略，视图可以使用不同的控制器实现，得到不同的行为。</li>
<li>视图使用组合模式实现用户界面，用户界面通常组合了嵌套的组件，像面板、框架和按钮。</li>
<li>适配器模式用来将新的模型适配成已有的视图和控制器。</li>
</ul>
</blockquote>
<h4 id="mvc-模式分析"><a href="#MVC-模式分析" class="headerlink" title="MVC 模式分析"></a>MVC 模式分析</h4><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC.jpg" alt=""></p>
<h4 id="mvc-观察者模式分析"><a href="#MVC-——-观察者模式分析" class="headerlink" title="MVC —— 观察者模式分析"></a>MVC —— 观察者模式分析</h4><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC_%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<h4 id="mvc-策略模式分析"><a href="#MVC-——-策略模式分析" class="headerlink" title="MVC —— 策略模式分析"></a>MVC —— 策略模式分析</h4><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC_%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<h4 id="mvc-组合模式分析"><a href="#MVC-——-组合模式分析" class="headerlink" title="MVC —— 组合模式分析"></a>MVC —— 组合模式分析</h4><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC_%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;复合模式&quot;&gt;&lt;a href=&quot;#复合模式&quot; class=&quot;headerlink&quot; title=&quot;复合模式&quot;&gt;&lt;/a&gt;复合模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;模式通常被一起使用，并被 &lt;strong&gt;组合&lt;/strong&gt; 在同一个设计解决方案中。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 代理模式</title>
    <link href="http://yoursite.com/2017/07/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/26/代理模式/</id>
    <published>2017-07-26T10:22:34.000Z</published>
    <updated>2017-07-26T14:17:06.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote>
<p><strong>代理模式</strong> 为另一个对象提供一个替身或占位符以控制对这个对象的访问，让代表对象 <em>控制</em> 某对象的访问<a id="more"></a>，被代理的对象可以是远程的对象、创建开销大的对象或需要安全控制的对象。</p>
<ol>
<li>首先是 Subject ，它为 RealSubject 和 Proxy 提供了接口。通过实现同一个接口，Proxy 在 RealSubject 出现的地方取代它。</li>
<li>RealSubject 是真正做事的对象，它是被 Proxy 代理和控制访问的对象。</li>
<li>Proxy 持有 RealSubject 的引用。在某些例子中，Proxy 还会负责 RealSubject 对象的创建和销毁。</li>
</ol>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="file:///D:/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<h3 id="远程代理"><a href="#远程代理" class="headerlink" title="远程代理"></a>远程代理</h3><blockquote>
<p><strong>远程代理</strong> 可以作为另一个 JVM 上对象的本地代表。调用代理的方法，会被代理利用 <em>网络转发</em> 到远程执行，并且结果会通过网络返回给代理，再由代理将结果转给客户。</p>
</blockquote>
<p><img src="file:///D:/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%90%86.png" alt=""></p>
<h3 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h3><p><img src="file:///D:/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%99%9A%E6%8B%9F%E4%BB%A3%E7%90%86.png" alt=""></p>
<h3 id="保护代理-动态代理"><a href="#保护代理-——-动态代理" class="headerlink" title="保护代理 —— 动态代理"></a>保护代理 —— 动态代理</h3><blockquote>
<p>保护代理可以根据客户的角色来决定是否允许客户访问特定的方法。</p>
<p>使用 Java API 的代理，创建一个保护代理：</p>
<ol>
<li>根据不同的客户角色创建各自的 InvocationHandle 。</li>
<li>创建 Proxy 类并实例化 Proxy 对象。</li>
<li>测试配对服务。</li>
</ol>
</blockquote>
<p><img src="file:///D:/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BF%9D%E6%8A%A4%E4%BB%A3%E7%90%86.png" alt=""></p>
<h3 id="其他代理模式"><a href="#其他代理模式" class="headerlink" title="其他代理模式"></a>其他代理模式</h3><h4 id="1-防火墙代理"><a href="#1-防火墙代理" class="headerlink" title="1. 防火墙代理"></a>1. 防火墙代理</h4><blockquote>
<p>控制网络资源的访问，变化主题免于 “坏客户” 的侵害。</p>
</blockquote>
<h4 id="2-智能引用代理"><a href="#2-智能引用代理" class="headerlink" title="2. 智能引用代理"></a>2. 智能引用代理</h4><blockquote>
<p>当主题被引用时，进行额外的动作，例如计算一个对象被引用的次数。</p>
</blockquote>
<h4 id="3-缓存代理"><a href="#3-缓存代理" class="headerlink" title="3. 缓存代理"></a>3. 缓存代理</h4><blockquote>
<p>为开销大的运算结果提供暂时存储；它也允许多个客户共享结果，以减少计算或网络延迟。</p>
</blockquote>
<h4 id="4-同步代理"><a href="#4-同步代理" class="headerlink" title="4. 同步代理"></a>4. 同步代理</h4><blockquote>
<p>在多线程的情况下为主题提供安全的访问。</p>
</blockquote>
<h4 id="5-复杂隐藏代理"><a href="#5-复杂隐藏代理" class="headerlink" title="5. 复杂隐藏代理"></a>5. 复杂隐藏代理</h4><blockquote>
<p>用来隐藏一个类的复杂集合的复杂度，并进行访问控制。有时候也称为外观代理。复杂隐藏代理和外观模式是不一样的，因为代理控制访问，而外观只是提供另一组接口。</p>
</blockquote>
<h4 id="6-写入时复制代理"><a href="#6-写入时复制代理" class="headerlink" title="6. 写入时复制代理"></a>6. 写入时复制代理</h4><blockquote>
<p>用来控制对象的复制，方法是延迟对象的复制，直到客户真的需要为止。这是虚拟代理的变体。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt; 为另一个对象提供一个替身或占位符以控制对这个对象的访问，让代表对象 &lt;em&gt;控制&lt;/em&gt; 某对象的访问
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 状态模式</title>
    <link href="http://yoursite.com/2017/07/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/26/状态模式/</id>
    <published>2017-07-26T02:42:22.000Z</published>
    <updated>2017-07-26T14:16:41.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><blockquote>
<p><strong>状态模式</strong> 允许对象在内部状态改变时改变它的 <em>行为</em>，对象看起来好像修改了它的类。<a id="more"></a></p>
<ol>
<li>因为这个模式将状态封装成为独立的类，并将动作委托到代表当前状态的对象。我们知道行为会随着内部状态而改变。</li>
<li>使用组合通过简单引用不同的状态对象来造成类改变的假象。</li>
</ol>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>将每个状态的行为 <strong>局部化</strong> 到它自己的类中。</li>
<li>将容易产生问题的 <em>if 语句</em> 删除，以方便日后的维护。</li>
<li>让每一个状态 “对修改关闭”，让类 “对扩展开放”，因为可以加入新的状态类。</li>
<li>创建一个新的代码基和类结构，这更能映射状态图，而且更容易阅读和理解。</li>
</ul>
<h3 id="状态模式和策略模式"><a href="#状态模式和策略模式" class="headerlink" title="状态模式和策略模式"></a>状态模式和策略模式</h3><ol>
<li>以状态模式而言，当前状态在状态对象集合中游走改变，以 <em>反映</em> 出 context 内部的状态，因此， context 的行为也会随之改变。但是 context 的客户对于状态对象了解不多，甚至根本是 <em>浑然不觉</em> 。</li>
<li>以策略模式而言，客户通常 <em>主动指定</em>  Context 所要组合的策略对象是哪一个。对于某个 context 对象来说，通常 <strong>只有一个</strong> 最适当的策略对象。</li>
<li>策略模式是除了 <em>继承</em> 之外的一种弹性替代方案。状态模式是不用在 context 中放置许多 <em>条件判断</em> 的替代方案。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerlink&quot; title=&quot;状态模式&quot;&gt;&lt;/a&gt;状态模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;状态模式&lt;/strong&gt; 允许对象在内部状态改变时改变它的 &lt;em&gt;行为&lt;/em&gt;，对象看起来好像修改了它的类。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 迭代器与组合模式</title>
    <link href="http://yoursite.com/2017/07/25/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/25/迭代器与组合模式/</id>
    <published>2017-07-25T12:18:30.000Z</published>
    <updated>2017-07-26T14:16:28.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器与组合模式"><a href="#迭代器与组合模式" class="headerlink" title="迭代器与组合模式"></a>迭代器与组合模式</h1><blockquote>
<p><strong>迭代器模式</strong> 提供一种方法 <em>顺序访问</em> 一个聚合对象中的各个元素，而又 <em>不暴露</em> 其内部的表示。<a id="more"></a></p>
<p>是迭代器模式把在元素之间游走的 <strong>责任</strong> 交给迭代器，而不是聚合对象。这不仅让聚合的接口和实现变得更加 <strong>简洁</strong> ，也可以让聚合更专注在它所应该专注的事情上面。</p>
</blockquote>
<h3 id="迭代器模式-类图"><a href="#迭代器模式-——-类图" class="headerlink" title="迭代器模式 —— 类图"></a>迭代器模式 —— 类图</h3><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<h3 id="迭代器与集合"><a href="#迭代器与集合" class="headerlink" title="迭代器与集合"></a>迭代器与集合</h3><p>​    Collection 和 Iterator 的好处在于，每个 Collection 都知道如何创建自己的 Iterator。只要调用 ArrayList 上的 iterator() ，就可以返回一个具体的 Iterator ，而你根本不需要 <em>知道或关心</em> 到底使用了哪个具体类，你只要使用它的 Iterator 接口就可以了。</p>
<p>​    Java 新形式的 for 语句，称为 for / in。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Object object: collection) &#123; ... &#125;</div></pre></td></tr></table></figure>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-一个类应该只有一个引起变化的原因"><a href="#1-一个类应该只有一个引起变化的原因。" class="headerlink" title="1. 一个类应该只有一个引起变化的原因。"></a>1. 一个类应该只有一个引起变化的原因。</h4><p>​    如果有一个类具有两个变化的原因，那么这会使得将来该类的变化几率 <em>上升</em> ，而当它真的改变时，你的设计中同时有两个方面将会受到影响。 <strong>区分</strong> 设计中的责任，是最困难的事情之一。</p>
<p>​    类的每个责任都有改变的 <strong>潜在</strong> 区域。超过一个责任，意味着超过一个改变的区域。尽量让每个类保持 <strong>单一</strong> 责任。</p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p><strong>组合模式</strong> 允许你将对象组合称树型结构来表现 “整体 / 部分” 层次结构。组合能让客户以一致的方式处理 <em>个别</em> 对象以及对象 <em>组合</em> 。</p>
<p>组合模式让我们能用树形方式创建对象的结构，树里面包含了 <em>组合</em> 以及 <em>个别对象</em> 。使用组合结构，我们能把 <em>相同</em> 的操作应用在组合和个别对象上。换句话说，在大多数情况下，我们可以 <strong>忽略</strong> 对象组合和个别对象之间的差别。</p>
</blockquote>
<h3 id="组合模式-类图"><a href="#组合模式-——-类图" class="headerlink" title="组合模式 —— 类图"></a>组合模式 —— 类图</h3><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<p>​    <strong>组合模式</strong> 以单一责任设计原则换取 <strong>透明性</strong>。透明性：通过让组件的接口同时包含一些管理子节点和页节点的操作，客户就可以将组合和叶节点一视同仁。</p>
<h3 id="组合迭代器"><a href="#组合迭代器" class="headerlink" title="组合迭代器"></a>组合迭代器</h3><p>​    这个 CompositeIterator 是一个不可小觑的迭代器。它的工作是遍历组件内的菜单项，而且确保所有的子菜单（以及子子菜单 …… ）都被包括进来。</p>
<p>​    <strong>空迭代器：</strong> 返回一个迭代器，而这个迭代器的 hasNext() 永远返回 false 。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跟所有的迭代器一样，我们实现Iterator接口。 </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompositeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123; </div><div class="line">  	Stack stack = <span class="keyword">new</span> Stack(); </div><div class="line">  	<span class="comment">/* </span></div><div class="line">  	 *	将我们要遍历的顶层组合的迭代器传入，我们把它抛进一个堆栈数据结构中</div><div class="line">     */ </div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">CompositeIterator</span><span class="params">(Iterator iterator)</span> </span>&#123;</div><div class="line">      	stack.push(iterator); </div><div class="line">    &#125; </div><div class="line">  </div><div class="line">  	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="comment">//想要知道是否还有下一个元素，我们检查堆栈是否被清空，如果已经空了，就表示没有下一个元素了 </span></div><div class="line">      	<span class="keyword">if</span> (stack.empty()) &#123; </div><div class="line">          	<span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">        &#125; <span class="keyword">else</span> &#123; </div><div class="line">          	<span class="comment">/* </span></div><div class="line">          	 *	否则我们就从堆栈的顶层中取出迭代器，看看是否还有下一个元素，</div><div class="line">             *	如果它没有元素，我们将它弹出堆栈，然后递归调用hasNext()。 </div><div class="line">             */ </div><div class="line">          	Iterator iterator = (Iterator) stack.peek(); </div><div class="line">          	<span class="keyword">if</span> (!iterator.hasNext()) &#123;</div><div class="line">              	stack.pop(); </div><div class="line">              	<span class="keyword">return</span> hasNext(); </div><div class="line">            &#125; <span class="keyword">else</span> &#123; </div><div class="line">              	<span class="comment">//否则，便是还有下一个元素 </span></div><div class="line">              	<span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">  </div><div class="line">  	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123; </div><div class="line">      	<span class="comment">//好了，当客户想要取得下一个元素时候，我们先调用hasNext()来确定时候还有下一个。 </span></div><div class="line">      	<span class="keyword">if</span> (hasNext()) &#123; </div><div class="line">          	<span class="comment">//如果还有下一个元素，我们就从堆栈中取出目前的迭代器，然后取得它的下一个元素 </span></div><div class="line">          	Iterator iterator = (Iterator) stack.peek(); </div><div class="line">          	MenuComponent component = (MenuComponent) iterator.next(); </div><div class="line">          	<span class="comment">/* </span></div><div class="line">          	 *	如果元素是一个菜单，我们有了另一个需要被包含进遍历中的组合， </div><div class="line">          	 *	所以我们将它丢进对战中，不管是不是菜单，我们都返回该组件。 </div><div class="line">          	 */ </div><div class="line">          	<span class="keyword">if</span> (component <span class="keyword">instanceof</span> Menu) &#123; </div><div class="line">              	stack.push(component.createIterator());</div><div class="line">            &#125; </div><div class="line">          	<span class="keyword">return</span> component; </div><div class="line">        &#125; <span class="keyword">else</span> &#123; </div><div class="line">          	<span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">  </div><div class="line">  	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; </div><div class="line">      	<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迭代器与组合模式&quot;&gt;&lt;a href=&quot;#迭代器与组合模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器与组合模式&quot;&gt;&lt;/a&gt;迭代器与组合模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代器模式&lt;/strong&gt; 提供一种方法 &lt;em&gt;顺序访问&lt;/em&gt; 一个聚合对象中的各个元素，而又 &lt;em&gt;不暴露&lt;/em&gt; 其内部的表示。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 模板方法模式</title>
    <link href="http://yoursite.com/2017/07/25/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/25/模板方法模式/</id>
    <published>2017-07-25T07:18:03.000Z</published>
    <updated>2017-07-26T14:16:12.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><blockquote>
<p><strong>模板方法模式</strong> 在一个方法中定义一个算法的 <strong>骨架</strong> ，而将一些步骤 <strong>延迟</strong> 到子类中。<a id="more"></a>模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<p>​    这个方法将算法定义成 <em>一组步骤</em>，其中的任何步骤都可以是抽象的，由子类 <em>负责实现</em> 。这可以确保算法结构保持不变，同时由子类提供部分实现。</p>
<p>​    工厂方法是模板方法的一个特殊版本。</p>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.png" alt=""></p>
<h3 id="对模板方法进行挂钩"><a href="#对模板方法进行挂钩" class="headerlink" title="对模板方法进行挂钩"></a>对模板方法进行挂钩</h3><p>​    钩子是一种被声明在抽象类中的 <em>方法</em> ，但只有 <em>空的</em> 或者 <em>默认</em> 的实现。钩子的存在，可以让子类有能力对算法的不同点进行挂钩。要不要挂钩，由子类 <em>自行决定</em> 。</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-好莱坞原则别调用打电话给我们我们会调用打电话给你"><a href="#1-好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。" class="headerlink" title="1. 好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。"></a>1. 好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。</h4><p>​    好莱坞原则可以给我们一种防止 “依赖腐败” 的方法。当高层组件依赖低层组件，而低层组件又依赖高层组件，而高层组件又依赖边侧组件，而边侧组件又依赖低层组件时，依赖腐败就发生了。</p>
<p>​    我们允许低层组件将自己挂钩到系统上，但是高层组件会 <strong>决定</strong> 什么时候和怎样使用这些低层组件。换句话说，高层组件对待低层组件的方式是 “别调用我们，我们会调用你” 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;模板方法模式&lt;/strong&gt; 在一个方法中定义一个算法的 &lt;strong&gt;骨架&lt;/strong&gt; ，而将一些步骤 &lt;strong&gt;延迟&lt;/strong&gt; 到子类中。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 适配器模式与外观模式</title>
    <link href="http://yoursite.com/2017/07/25/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/25/适配器模式与外观模式/</id>
    <published>2017-07-25T03:48:33.000Z</published>
    <updated>2017-07-25T03:52:20.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式与外观模式"><a href="#适配器模式与外观模式" class="headerlink" title="适配器模式与外观模式"></a>适配器模式与外观模式</h1><blockquote>
<p> <strong>适配器模式</strong> 将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口 <em>不兼容</em> 的类可以合作无间。<a id="more"></a> </p>
<ul>
<li>客户通过目标接口调用 <em>适配器的方法</em> 对适配器发出请求。</li>
<li>适配器使用被适配器者接口把 <strong>请求</strong> 转换成被适配者的一个或多个调用接口。</li>
<li>客户接收调用的结果，但并未察觉这一切是适配器在起 <strong>转换</strong> 作用。</li>
</ul>
</blockquote>
<h3 id="适配器模式-类图"><a href="#适配器模式-——-类图" class="headerlink" title="适配器模式 —— 类图"></a>适配器模式 —— 类图</h3><ol>
<li>对象适配器（组合）：</li>
</ol>
<p><img src="http://img.mukewang.com/57aae10a00012e5d06710293.png" alt=""></p>
<ol>
<li><p>类适配器（继承）：</p>
<p><img src="http://img.mukewang.com/57aae3c900012ee908380320.png" alt=""></p>
</li>
</ol>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><blockquote>
<p> <strong>外观模式</strong> 提供一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
</blockquote>
<h3 id="外观模式-类图"><a href="#外观模式-——-类图" class="headerlink" title="外观模式 —— 类图"></a>外观模式 —— 类图</h3><p><img src="http://img.mukewang.com/57aaee0500014f3807280378.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-最少知识原则只和你的密友谈话"><a href="#1-最少知识原则：只和你的密友谈话。" class="headerlink" title="1. 最少知识原则：只和你的密友谈话。"></a>1. 最少知识原则：只和你的密友谈话。</h4><p>​    当设计一个系统时，不管是任何对象，你都要注意它所 <strong>交互</strong> 的类有哪些，并注意它和这些类是如何交互的。</p>
<p>就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法：</p>
<ul>
<li>该对象本身</li>
<li>被当做方法的参数而传进来的对象</li>
<li>此方法所创建或实例化的任何对象</li>
<li>对象的任何组件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不采用这个原则：先取得温度计对象，再从温度计对象取得温度。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">return</span> station.getThermometer().getTemperature();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 采用这个原则：在气象站中添加一个方法，用来向温度计请求温度</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">return</span> station.getTemperature();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="装饰者-适配器-外观"><a href="#装饰者、适配器、外观" class="headerlink" title="装饰者、适配器、外观"></a>装饰者、适配器、外观</h3><p>​    装饰者：不改变接口，但加入责任。</p>
<p>​    适配器：将一个接口转成另一个接口。</p>
<p>​    外观：让接口更简单。</p>
<p>​    客户不会意识到 <em>装饰者或适配器</em> 的存在，实现解耦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;适配器模式与外观模式&quot;&gt;&lt;a href=&quot;#适配器模式与外观模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式与外观模式&quot;&gt;&lt;/a&gt;适配器模式与外观模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;适配器模式&lt;/strong&gt; 将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口 &lt;em&gt;不兼容&lt;/em&gt; 的类可以合作无间。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 命令模式</title>
    <link href="http://yoursite.com/2017/07/25/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/25/命令模式/</id>
    <published>2017-07-25T02:05:33.000Z</published>
    <updated>2017-07-25T02:08:07.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote>
<p> <strong>命令模式</strong> 将 “请求” <em>封装</em> 成对象，以便使用不同的请求、队列或者日志来 <em>参数化</em> 其他对象。命令模式也支持 <em>可撤销</em> 的操作。 <a id="more"></a> </p>
<ul>
<li>客户创建一个命令对象。</li>
<li>客户利用 setCommand() 将命令对象 <strong>储存</strong> 在调用者中。</li>
<li>稍后 …… 客户 <strong>要求</strong> 调用者执行命令。请注意：一旦命令被加载到调用者，该命令可以被使用并丢弃，或者可以被保留下来并使用许多次。</li>
</ul>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://img.mukewang.com/57a955ec0001110107710601.png" alt=""></p>
<h3 id="空对象"><a href="#空对象" class="headerlink" title="空对象"></a>空对象</h3><p>​    当你不想返回一个有意义的对象时，空对象就很有用。客户也可以将处理 null 的 <strong>责任转移</strong> 给空对象。</p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>​    1. 命令模式将发出请求的对象和执行请求的对象 <strong>解耦</strong> 。</p>
<p>​    2. 调用者可以接受命令当做 <em>参数</em> ，甚至在运行时 <em>动态</em> 地进行。</p>
<p>​    3. 实际操作时，很常见使用 “聪明” 命令对象，也就是直接实现了请求，而不是将工作委托给接收者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;命令模式&lt;/strong&gt; 将 “请求” &lt;em&gt;封装&lt;/em&gt; 成对象，以便使用不同的请求、队列或者日志来 &lt;em&gt;参数化&lt;/em&gt; 其他对象。命令模式也支持 &lt;em&gt;可撤销&lt;/em&gt; 的操作。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 单件模式</title>
    <link href="http://yoursite.com/2017/07/24/%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/单件模式/</id>
    <published>2017-07-24T14:11:27.000Z</published>
    <updated>2017-07-26T14:15:49.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单件模式"><a href="#单件模式" class="headerlink" title="单件模式"></a>单件模式</h1><blockquote>
<p><strong>单件模式</strong> 确保一个类只有一个实例，并提供一个全局访问点。<a id="more"></a></p>
</blockquote>
<h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  	<span class="comment">// volatile 关键字确保：当 singleton 变量被初始化成 Singleton 实例时，多个线程正确地处理 		// singleton 变量</span></div><div class="line">  	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</div><div class="line">  	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="comment">// 用 “双重检查加锁” ，在 getInstance() 中减少使用 同步 。</span></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">          	<span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">              	<span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                	singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">          	&#125;</div><div class="line">      	&#125;</div><div class="line">      	<span class="keyword">return</span> singleton;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="file:///mnt/D/%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单件模式&quot;&gt;&lt;a href=&quot;#单件模式&quot; class=&quot;headerlink&quot; title=&quot;单件模式&quot;&gt;&lt;/a&gt;单件模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;单件模式&lt;/strong&gt; 确保一个类只有一个实例，并提供一个全局访问点。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 工厂模式</title>
    <link href="http://yoursite.com/2017/07/24/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/工厂模式/</id>
    <published>2017-07-24T12:10:27.000Z</published>
    <updated>2017-07-25T02:01:34.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote>
<p><strong>工厂方法模式</strong> 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>
<p><strong>抽象工厂模式</strong> 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。 <a id="more"></a> </p>
</blockquote>
<h3 id="定义简单工厂"><a href="#定义简单工厂" class="headerlink" title="定义简单工厂"></a>定义简单工厂</h3><p>​    <strong>简单工厂</strong> ，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类 <strong>解耦</strong> 。</p>
<p><img src="http://img.mukewang.com/57a36e6c00015d0d08390528.png" alt=""></p>
<h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">abstract</span> Product <span class="title">factoryMethod</span><span class="params">(String type)</span></span></div></pre></td></tr></table></figure>
<h3 id="工厂方法模式-类图"><a href="#工厂方法模式-——-类图" class="headerlink" title="工厂方法模式 —— 类图"></a>工厂方法模式 —— 类图</h3><p><img src="http://img.mukewang.com/57a388f80001feec07690453.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-要依赖抽象不要依赖具体类-依赖倒置原则"><a href="#1-要依赖抽象，不要依赖具体类。——-依赖倒置原则" class="headerlink" title="1. 要依赖抽象，不要依赖具体类。—— 依赖倒置原则"></a>1. 要依赖抽象，不要依赖具体类。—— 依赖倒置原则</h4><blockquote>
<ul>
<li>变量不可以持有具体类的引用。</li>
<li>不要让类派生自具体类。</li>
<li>不要覆盖基类中已实现的方法。</li>
</ul>
</blockquote>
<p>​    不能让高层组件依赖低层组件，而且，不管高层或低层组件，“两者” 都应该依赖于 <strong>抽象</strong> 。所谓 “高层” 组件，是由其他低层组件定义其 <em>行为</em> 的类。</p>
<p>​    如果有一个不像是会改变的类，那么在代码中直接实例化具体类也就没有什么大碍。另一方面，如果有个类可能改变，你可以采用一些好技巧（例如工厂方法）来封装改变。</p>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sauce = ingredientFactory.createSauce();</div></pre></td></tr></table></figure>
<h3 id="抽象工厂模式-类图"><a href="#抽象工厂模式-——-类图" class="headerlink" title="抽象工厂模式 —— 类图"></a>抽象工厂模式 —— 类图</h3><p><img src="http://img.mukewang.com/57a39dc60001bf0b06180511.png" alt=""></p>
<h3 id="工厂方法和抽象工厂的区别"><a href="#工厂方法和抽象工厂的区别" class="headerlink" title="工厂方法和抽象工厂的区别"></a>工厂方法和抽象工厂的区别</h3><ol>
<li>工厂方法使用 <strong>继承</strong> ：把对象的创建 <em>委托</em> 给子类，子类实现工厂方法来创建对象；抽象工厂使用对象 <strong>组合</strong> ：对象的创建被实现在工厂接口所暴露出来的 <strong>方法</strong> 中。</li>
<li>抽象工厂是用来创建整个 <strong>产品家族</strong> 的；而工厂方法只是创建一个 <strong>产品</strong> 。抽象工厂的具体工厂经常实现工厂方法来创建它的产品。</li>
<li>所有工厂模式都通过 <strong>减少</strong> 应用程序与具体类之间的 <strong>依赖</strong> 促进松耦合。</li>
<li>工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工厂方法模式&lt;/strong&gt; 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抽象工厂模式&lt;/strong&gt; 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 装饰者模式</title>
    <link href="http://yoursite.com/2017/07/24/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/装饰者模式/</id>
    <published>2017-07-24T07:15:35.000Z</published>
    <updated>2017-07-25T02:12:38.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><blockquote>
<p><strong>装饰者模式</strong> 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。 <a id="more"></a> </p>
<ul>
<li>装饰者和被装饰者对象有相同的超类型。</li>
<li>你可以用一个或多个装饰者包装一个对象。</li>
<li>既然装饰者和被装饰者对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合，可以用装饰过的对象代替它。</li>
<li>装饰者可以在所委托被装饰者的行为 <em>之前 <strong>与/或</strong> 之后</em> ，加上自己的行为，以达到特定的目的。</li>
<li>对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰对象。</li>
</ul>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://img.mukewang.com/57a213c20001a3ee08100592.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-类应该对扩展开放对修改关闭"><a href="#1-类应该对扩展开放，对修改关闭。" class="headerlink" title="1. 类应该对扩展开放，对修改关闭。"></a>1. 类应该对扩展开放，对修改关闭。</h4><p>​    允许类容易 <strong>扩展</strong> ，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有 <strong>弹性</strong> 就可以应对改变，可以接受新的功能来应对改变的需求。</p>
<p>​    在 <strong>选择</strong> 需要被扩展的代码部分时要小心。每个地方都采用 <em>开放—关闭原则</em> ，是一种浪费，也没必要，还会导致代码变得复杂且难以理解。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​    装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得复杂。</p>
<p>​    只有在针对 <strong>抽象</strong> 组件类型编程时，才不会因为装饰者而受到影响。如果的确针对 <strong>特定</strong> 的具体组件编程，就应该重新思考应用架构，以及装饰者是否适合。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式&quot;&gt;&lt;/a&gt;装饰者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt; 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 观察者模式</title>
    <link href="http://yoursite.com/2017/07/24/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/24/观察者模式/</id>
    <published>2017-07-24T02:05:07.000Z</published>
    <updated>2017-07-24T12:36:03.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p><strong>观察者模式</strong> 定义了对象之间的<em>一对多</em>依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 <a id="more"></a> </p>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://img.mukewang.com/57a0c6a10001c6d708190539.png" alt=""></p>
<h3 id="松耦合的威力"><a href="#松耦合的威力" class="headerlink" title="松耦合的威力"></a>松耦合的威力</h3><blockquote>
<p>当两个对象之间 <strong>松耦合</strong> ，它们依然可以交互，但是不太清楚彼此的 <strong>细节</strong> 。</p>
<p>观察者模式提供了一种对象设计，让主题和观察者之间松耦合。</p>
</blockquote>
<p>​    主题只知道观察者实现了某个接口（也就是 <strong>Observer 接口</strong>）。主题不需要知道观察者的具体类是谁、做了些什么或其他任何细节。主题唯一依赖的东西是一个实现 Observer 接口的 <strong>对象列表</strong> ，我们可以随时增加观察者。</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-为了交互对象之间的松耦合设计而努力"><a href="#1-为了交互对象之间的松耦合设计而努力。" class="headerlink" title="1. 为了交互对象之间的松耦合设计而努力。"></a>1. 为了交互对象之间的松耦合设计而努力。</h4><p>​    松耦合的设计之所以能让我们建立有 <em>弹性</em> 的 OO 系统，能够应对变化，是因为对象之间的 <strong>相互依赖</strong> 降到了最低。</p>
<h4 id="2-找出程序中会变化的方面然后将其和固定不变的方面相分类"><a href="#2-找出程序中会变化的方面，然后将其和固定不变的方面相分类。" class="headerlink" title="2. 找出程序中会变化的方面，然后将其和固定不变的方面相分类。"></a>2. 找出程序中会变化的方面，然后将其和固定不变的方面相分类。</h4><p>​    在观察者模式中，会改变的是主题的状态，以及观察者的数目和类型。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。这就叫 <strong>提前规划</strong>！</p>
<h4 id="3-针对接口编程不针对实现编程"><a href="#3-针对接口编程，不针对实现编程。" class="headerlink" title="3. 针对接口编程，不针对实现编程。"></a>3. 针对接口编程，不针对实现编程。</h4><p>​    主题与观察者都使用 <strong>接口</strong> ：观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样就可以让两者之间运转正常，又同时具有松耦合的优点。</p>
<h4 id="4-多用组合少用继承"><a href="#4-多用组合，少用继承。" class="headerlink" title="4. 多用组合，少用继承。"></a>4. 多用组合，少用继承。</h4><p>​    观察者模式利用 “组合” 将许多观察者 <strong>组合</strong> 进主题中，对象之间的这种关系不是通过继承产生的，而是通过运行时利用组合的方式而产生的。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​    有多个观察者时，不可以依赖 <strong>特定</strong> 的通知次序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt; 定义了对象之间的&lt;em&gt;一对多&lt;/em&gt;依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式 之 策略模式</title>
    <link href="http://yoursite.com/2017/07/23/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/23/策略模式/</id>
    <published>2017-07-23T12:10:27.000Z</published>
    <updated>2017-07-24T12:22:04.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p><strong>策略模式</strong> 定义了算法族，分别<em>封装</em>起来，让它们之间可以相互<em>替换</em>，此模式让算法的变化独立与使用算法的客户。 <a id="more"></a> </p>
</blockquote>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h4 id="1-找出应用中可能需要变化之处把它们独立出来不要和那些不需要变化的代码混在一起"><a href="#1-找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。" class="headerlink" title="1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。"></a>1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</h4><p>​    把会 <strong>变化</strong> 的部分取出并 <strong><em>封装</em></strong> 起来，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。</p>
<p>​    所有的模式都提供了一套方法让 “系统中的某部分改变 <strong>不会影响</strong> 其他部分” 。</p>
<h4 id="2-针对接口编程而不是针对实现编程"><a href="#2-针对接口编程，而不是针对实现编程。" class="headerlink" title="2. 针对接口编程，而不是针对实现编程。"></a>2. 针对接口编程，而不是针对实现编程。</h4><p>​    以前的做法：行为来自超类的具体实现，或是继承某个借口并有子类自行实现而来。装两种做法都 <strong>依赖于</strong> “ 实现” ，没办法更改行为（除非写更多代码）。</p>
<p>​    新设计：子类将使用接口所表示的行为，特定的具体行为编写在<em>实现了接口的类</em>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</div><div class="line">  	<span class="comment">// 每只鸭子都会引用实现该行为接口的对象</span></div><div class="line">  	QuackBehavior quackBehavior;</div><div class="line">  	...</div><div class="line">  	<span class="comment">// 通过委托 quackBehavior 对象，处理行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</div><div class="line">      quackBehavior.quack();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-多用组合少用继承"><a href="#3-多用组合，少用继承。" class="headerlink" title="3. 多用组合，少用继承。"></a>3. 多用组合，少用继承。</h4><p>​    使用组合建立系统具有很大的 <em>弹性</em> ，不仅可将算法族封装成类，更可以 “在运行时 <strong>动态</strong> 地改变行为” 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;策略模式&lt;/strong&gt; 定义了算法族，分别&lt;em&gt;封装&lt;/em&gt;起来，让它们之间可以相互&lt;em&gt;替换&lt;/em&gt;，此模式让算法的变化独立与使用算法的客户。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gradle 学习笔记</title>
    <link href="http://yoursite.com/2017/07/22/Gradle-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/22/Gradle-学习笔记/</id>
    <published>2017-07-22T13:40:27.000Z</published>
    <updated>2017-07-23T07:12:23.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><blockquote>
<p>良好的编码习惯和风格，对于减少不必要的 Gradle 问题是很有帮助的。 <a id="more"></a> 例如库项目中的统一资源前缀、统一的 arr 引用、 Mainifest 中统一的 Style 配置等，这些在 Gradle 进行编译的过程中是非常容易出错的。</p>
</blockquote>
<p>[TOC]</p>
<h4 id="gradle-初探"><a href="#Gradle-初探" class="headerlink" title="Gradle 初探"></a>Gradle 初探</h4><p><strong>1. 项目全局 build.gradle</strong></p>
<p><strong>2. Module build.gradle</strong></p>
<ul>
<li>apply plugin 领域</li>
<li>android 领域</li>
<li>dependencies 领域</li>
<li>Android Gradle DSL 的<a href="http://google.github.io/android-gradle-dsl/current/index.html" target="_blank" rel="external">文档</a></li>
</ul>
<p><strong>3. local.properties</strong></p>
<p>IDE 通过 Android_Home 环境变量自动生成配置文件。</p>
<p><strong>4. Gradle Task</strong></p>
<p>通过多个 Gradle Tesk 相互调用，编译 Android 工程。</p>
<h4 id="gradle-进阶"><a href="#Gradle-进阶" class="headerlink" title="Gradle 进阶"></a>Gradle 进阶</h4><p><strong>1. 更改项目结构</strong></p>
<p>​    将 Eclipse 项目结构修改，并导入到 Android Studio 中。</p>
<p>​    Android 项目的项目结构要在 Android 领域中进行配置，如下所示：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">  	main &#123;</div><div class="line">      	java.srcDris = [<span class="string">'src'</span>]</div><div class="line">      	res.srcDris = [<span class="string">'res'</span>]</div><div class="line">      	asset.srcDris = [<span class="string">'assets'</span>]</div><div class="line">      	jni.srcDris = [<span class="string">'jni'</span>]</div><div class="line">      	jniLibs.srcDris = [<span class="string">'libs'</span>]</div><div class="line">      	mainifest.srcFile <span class="string">'AndroidMainifest.xml'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 构建全局配置</strong></p>
<p>​    在项目全局 build.gradle 中，通过 ext 领域指定全局的配置信息。</p>
<p>​    通过 rootProject.ext 引用所有的全局参数。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">  	compileSdkVersion = <span class="number">23</span></div><div class="line">  	buildToolsVersion = <span class="string">"23.0.2"</span></div><div class="line">  	minSdkVersion = <span class="number">14</span></div><div class="line">  	targetSdkVersion = <span class="number">23</span></div><div class="line">  	versionCode = <span class="number">3</span></div><div class="line">  	versionName = <span class="string">"1.0.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. 构建 defaultConfig</strong></p>
<p>​    在 Gradle 脚本中写代码，以便动态控制编译过程。</p>
<p><strong>4. 构建 buildTypes</strong></p>
<p>​    通过创建不同的构建类型，从而生成不同类型的 apk 。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">  	release &#123;</div><div class="line">      	minifyEnabled <span class="literal">false</span></div><div class="line">      	proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    构建类型 buildTypes 的继承</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">xys.initWith(buildTypes.debug)</div><div class="line">xys &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 构建 signingConfigs</strong></p>
<p><strong>6. 生成签名</strong></p>
<p>​    Build -&gt; Generate Signed APK 选择 module，点击 Next，选择 “Create new …” ，填写必要的信息</p>
<p>​    签名配置</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">  	xys &#123;</div><div class="line">      	storeFile file(<span class="string">"xys_key.jks"</span>)</div><div class="line">      	storePassWord <span class="string">"1234567"</span></div><div class="line">      	keyAlias <span class="string">"xys"</span></div><div class="line">      	keyPassword <span class="string">"1234567"</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>7. Android 领域中的可选配置</strong></p>
<ul>
<li>compileOptions：配置编译的选项（Java 的编译版本）</li>
<li>lintOptions：控制 Lint 代码检查。在 Lint Check 的时候，编译会因为 Lint的 error 而终止。</li>
</ul>
<p><strong>8. 构建 Proguard</strong></p>
<p>​    Proguard 配置是Android 的 apk 混淆文件配置，它同样可以精简代码、资源，优化代码结构。</p>
<p><strong>9. Gradle 动态参数配置</strong></p>
<p><strong>10. System.properties 方式</strong></p>
<p>​    打开 gradle.properties 文件，将配置参数配置到该文件中，然后通过 System.properties[KEY] 获取参数。</p>
<p><strong>11. 多渠道打包</strong></p>
<p>​    创建渠道占位符：在 AndroidMainifest 文件的 Application 节点下，创建 meta-data 节点。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">	<span class="attr">android:name</span>=<span class="string">"PRODUCT"</span></div><div class="line">	<span class="attr">android:value</span>=<span class="string">"$&#123;CHANNEL_VALUE&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p>​    配置 Gradle 脚本</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">  	product1 &#123;&#125;</div><div class="line">  	product2 &#123;&#125;</div><div class="line">  	product3 &#123;&#125;</div><div class="line">&#125;</div><div class="line">productFlavors.all &#123; flavor -&gt;</div><div class="line">  	flavor.manifestPlaceholders = [<span class="string">CHANNEL_VALUE:</span>name]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>12. 生成重命名包</strong></p>
<p><strong>13. 为不同版本添加不同代码</strong></p>
<p>​    在开发中，不同版本通常有不同的代码功能。一般会有一个全局的变量开关，根据不同的版本设置不同的值。</p>
<h4 id="gradle-多项目依赖"><a href="#Gradle-多项目依赖" class="headerlink" title="Gradle 多项目依赖"></a>Gradle 多项目依赖</h4><blockquote>
<p>​    Android通过提供了一个新的依赖 —— <em>aar</em> 。通过 <em>aar</em> 方式进行项目依赖，主项目可以像使用 jar 包一样使用这个库项目。</p>
</blockquote>
<p><strong>1. jar 包依赖</strong></p>
<p>​    在每一个 module 的根目录下都有一个 libs 文件夹，开发者可以把 jar 包拷贝到该目录下，并单击鼠标右键在菜单中选择 “add as library” 进行引用（或者直接 Sync 项目也可以实现引用）。</p>
<p>​    使用 Gradle 编译成 jar 包</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">task makeJar(<span class="string">type:</span> Jar) &#123;</div><div class="line">  	<span class="comment">// 清空已经存在的 jar 包</span></div><div class="line">  	delete <span class="string">'libs/sdk.jar'</span></div><div class="line">  	<span class="comment">// 指定生成的 jar 包名</span></div><div class="line">  	baseName <span class="string">'sdk'</span></div><div class="line">  	<span class="comment">// 从 class 文件生成 jar 包</span></div><div class="line">  	from(<span class="string">'build/intermediates/classes/debug/com/xys'</span>)</div><div class="line">  	<span class="comment">// 打包进 jar 包后的文件目录结构</span></div><div class="line">  	into(<span class="string">'com/xys/'</span>)</div><div class="line">  	<span class="comment">// 去掉不需要打包的目录和文件</span></div><div class="line">  	exclude(<span class="string">'test/'</span>,<span class="string">'BuildConfig.class'</span>,<span class="string">'R.class'</span>)</div><div class="line">  	<span class="comment">// 去掉 R 文件</span></div><div class="line">  	exclude &#123;it.name.startsWith(<span class="string">'R$S'</span>);&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. 本地库项目依赖</strong></p>
<p>​    Android Studio 提供库项目的依赖方法。</p>
<p>​    创建 module：File -&gt; New -&gt; New Module ，在弹出的界面中选择 Android Library 。</p>
<p><strong>3. 远程仓库依赖</strong></p>
<p>​    Gradle 支持以 aar 的形式依赖远程服务器上的库项目。如：引用 Maven 中央库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.jckewharton.scalpel.scalpel:scalpel:1.1.2'</span></div></pre></td></tr></table></figure>
<p><strong>4. 本地 aar 依赖</strong></p>
<p>​    对于本地项目来说，既可以使用 module 的方式进行依赖，也可以和从远程仓库中拉取下来的 aar 一样，使用本地的 aar 进行依赖。</p>
<h4 id="gradle-依赖管理"><a href="#Gradle-依赖管理" class="headerlink" title="Gradle 依赖管理"></a>Gradle 依赖管理</h4><blockquote>
<p>​    依赖可的管理工作问题，特别是一个依赖的库项目同时还依赖了另一个库项目，如果某个库项目发生改变，而且与以前版本不兼容，就会导致依赖库发生问题</p>
</blockquote>
<p><strong>1. Gradle 依赖库缓存</strong></p>
<p>​    Gradle 拉取的 aar 库保存在本地的 ~/.gradle 文件夹和 ~/.m2 文件夹中。</p>
<p><strong>2. 利用 Gradle 的通知机制</strong></p>
<p>​    当项目有版本库更新之后，Gradle 会给出一种通知机制，即利用 Gradle 的检查周期进行 <em>check</em> 。</p>
<p><strong>3. 利用 Gradle 的依赖检查</strong></p>
<p><strong>4. Gradle 依赖传递</strong></p>
<p>​    当主项目 A 依赖库项目 B ，库项目 B 依赖库项目 C 和 jar 包 D 。</p>
<p>​    B项目及其依赖的所有项目，即 C 和 D ：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile ‘com.xxx.xxxxx.xxxxxx<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>-SNAPSHOT’</div></pre></td></tr></table></figure>
<p>​    引用 B 项目，但不进行依赖传递，即不依赖库项目 C ：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile ‘com.xxx.xxxxx.xxxxxx<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>-SNAPSHOT <span class="meta">@aar</span>’</div></pre></td></tr></table></figure>
<p>​    排除一个库引用的其他库：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">compile (‘com.xxx.yyy.aaa<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span>’) &#123;</div><div class="line">  	exclude <span class="string">module:</span> <span class="string">'com.xxx.yyy.bbb:1.1.2'</span></div><div class="line">  	exclude <span class="string">module:</span> <span class="string">'com.xxx.yyy.ccc:1.1.3'</span></div><div class="line">&#125;</div><div class="line">compile <span class="string">'com.xxx.yyy.bbb:1.1.2'</span></div><div class="line">compile <span class="string">'com.xxx.yyy.ccc:1.1.2'</span></div></pre></td></tr></table></figure>
<p><strong>5. Gradle 依赖统一管理</strong></p>
<p>​    将全局参数抽取出来，写到一个单独的配置文件中，如：config.gradle 文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">  	android = [<span class="string">compileSdkVersion:</span><span class="number">23</span>,</div><div class="line"><span class="symbol">  			   buildToolsVersion:</span> <span class="string">'23,0,2'</span>]</div><div class="line">  	dependencies = [<span class="string">supportv7:</span> <span class="string">'com.android.support:appcompat-v7:23.2.0'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="gradle-使用技巧"><a href="#Gradle-使用技巧" class="headerlink" title="Gradle 使用技巧"></a>Gradle 使用技巧</h4><p><strong>1. 生成 Gradle 编译脚本</strong></p>
<p>​    只要在目录下执行 gradle init wrapper 指令就可以生成这些必须的脚本文件，在在这些默认的脚本上进行修改就容易多了 。</p>
<p><strong>2. Gradle peer not authenticated</strong></p>
<p>​    更新 Gradle 的依赖包时，发生 peer not authenticated 的异常，导致 Gradle 无法编译。</p>
<p>​    使用 VPN 进行网络访问，或者修改 jcenter 库的地址：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jcenter &#123;</div><div class="line">  	url <span class="string">"http://jcenter.bintray.com/"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3. Gradle 性能检测</strong></p>
<p>​    Gradle 编译工具本身就内置了一个性能分析工具 —— profile 。执行一下脚本：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle build -profile</div></pre></td></tr></table></figure>
<p>​    在根目录的 Build 目录下就会生成一个 profile 文件，通过分析该 profile 文件，适当关掉一些不必要的 Task 可提高 Gradle 编译速度。</p>
<p><strong>4. Gradle 加速</strong></p>
<p>​    Gradle 在编译时会执行大量的 Task ，同时生成很多文件。因此磁盘 IO 会造成编译速度缓慢。最好的办法是：更换固态（增加磁盘 IO 速度）、尽量减少本地库项目的依赖，多使用 <strong>aar</strong> 进行依赖。</p>
<p>​    在 gradle.properties 中添加一下代码，开启 Gradle 的多线程和多核心支持。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.gradle.daemon=<span class="literal">true</span></div><div class="line">org.gradle.parallel=<span class="literal">true</span></div><div class="line">org.gradle.configureondemand=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>​    在 build.gradle 中开启 Gradle 的增量编译。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dexOptions &#123;</div><div class="line">incremental <span class="literal">true</span></div><div class="line">	javaMaxHeapSize <span class="string">"4g"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. 增加编译内存</strong></p>
<p>​    当遇到编译时内存溢出时，则需要对默认的内存设置进行调整，即在 gradle.properties 文件中增加内存配置。</p>
<p><strong>6. Gradle 调用终端指令</strong></p>
<p>​    例如，新建一个 Task，</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task testcmd &#123;</div><div class="line">  	println <span class="string">'git log --pretty=oneline -1'</span>.execute([], project.rootDir).text</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>7. 使用 Gradle 精简资源</strong></p>
<p>​    <strong>minifyEnabled</strong> 指令不仅可以对代码进行混淆，还可以对代码进行<em>优化、精简</em>。同时配合 <strong>shrinkResources</strong> 指令，还可以<em>清除</em>项目工程文件中无效的资源文件，进一步精简 APK 文件。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  	......</div><div class="line">  	buildTypes &#123;</div><div class="line">      	minifyEnabled <span class="literal">true</span></div><div class="line">      	shrinkResources <span class="literal">true</span></div><div class="line">      	proguardFiles getDefaultProguandfile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rule.pro'</span></div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>8. 清除 Gradle 缓存</strong></p>
<p>​    使用 gradle clean 指令清理 Gradle 缓存；还有 gradle –refresh-dependencies 指令重新刷新全部的依赖库，获取新的版本库。</p>
<p><strong>9. 使用 Gradle 本地缓存</strong></p>
<p>​    在 Setting - Build - Build Tools - Gradle 标签中，选择 Offline work 并指定默认的 .gradle 文件夹。</p>
<p><strong>10. Gradle 版本问题导致的编译错误</strong></p>
<p>​    例如 Gradle Version 导致的问题是由于 gradle wrapper 导致的。解决这个问题：Setting -&gt; Build - Build Tools - Gradle -&gt; Project - Level setting，勾选 Use default gradle wrapper (recommended)。</p>
<p>​    一般来说，应该在本地配置稳定的 Gradle 版本，即勾选 Use local gradle distribution 选项，填写本地的 Gradle 路径（需要配置好 Gradle Shell 的环境变量）。新版的 Android Studio 中，已经自带 Gradle 了，可以直接链接到 Android Studio 中的 Gradle。</p>
<p><strong>11. Gradle 资源冲突</strong></p>
<p>​    Gradle 采用的是合并的方式进行编译，所有的文件、代码都会被 <strong><em>Merge</em></strong> 到一起，相同的资源名就会发生冲突。因此，需要对<em>代码规范</em>进行调整，对于资源、文件名来说，尽量使用 module 前缀来进行区分，jar 包、aar库的版本一定要进行统一管理。</p>
<h4 id="gradle-自定义插件"><a href="#Gradle-自定义插件" class="headerlink" title="Gradle 自定义插件"></a>Gradle 自定义插件</h4><blockquote>
<p>在 Gradle 中创建<strong><em>自定义</em></strong>插件，Gradle 提供了一下三种方式。</p>
<ul>
<li>在 build.gradle 脚本中直接使用。</li>
<li>在 buildSrc 中使用。</li>
<li>在独立 Module 中使用。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;良好的编码习惯和风格，对于减少不必要的 Gradle 问题是很有帮助的。
    
    </summary>
    
    
  </entry>
  
</feed>
